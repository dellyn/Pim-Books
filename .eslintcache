[{"E:\\Learning\\React\\react-apps\\pim-books\\src\\index.tsx":"1","E:\\Learning\\React\\react-apps\\pim-books\\src\\App.tsx":"2","E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\SearchPanel\\SearchPanel.tsx":"3","E:\\Learning\\React\\react-apps\\pim-books\\src\\service\\BookService.tsx":"4","E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\SearchPanel\\index.tsx":"5","E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\Preloader\\Preloader.tsx":"6"},{"size":197,"mtime":1606859452349,"results":"7","hashOfConfig":"8"},{"size":372,"mtime":1607521226772,"results":"9","hashOfConfig":"8"},{"size":6384,"mtime":1607521883369,"results":"10","hashOfConfig":"8"},{"size":1565,"mtime":1607521950474,"results":"11","hashOfConfig":"8"},{"size":73,"mtime":1606860621341,"results":"12","hashOfConfig":"8"},{"size":344,"mtime":1607262593172,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"l8itc8",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"E:\\Learning\\React\\react-apps\\pim-books\\src\\index.tsx",[],["29","30"],"E:\\Learning\\React\\react-apps\\pim-books\\src\\App.tsx",[],"E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\SearchPanel\\SearchPanel.tsx",["31"],"import React, { useEffect, useState } from \"react\";\r\nimport { getBooksData, getLiveBooksData } from \"../../service/BookService\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport \"./SearchPanel.scss\";\r\n\r\ninterface Book {\r\n  readonly title: string;\r\n  readonly imageLink: string;\r\n  readonly infoLink: string;\r\n}\r\n\r\nconst SearchPanel = () => {\r\n  const [moreBoksStep] = useState<number>(10);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [booksResult, setBooksResult] = useState<Book[]>([]);\r\n  const [searchString, setSearchString] = useState<string>(\"\");\r\n  const [intervalRequest, setIntervalRequest] = useState<any>();\r\n  const [errorSearch, setErrorSearch] = useState<boolean>(false);\r\n  const [statusSearch, setStatusSearch] = useState<boolean>(false);\r\n  const [maxResults, setMaxResults] = useState<number>(moreBoksStep);\r\n  const [booksLiveResult, setBooksLiveResult] = useState<Book[]>([]);\r\n  const [moreBookLoading, setMoreBookLoading] = useState<boolean>(false);\r\n  const [activeSearchString, setActiveSearchString] = useState<string>(\"\");\r\n\r\n  const updateData = (\r\n    getData: any,\r\n    setData: any,\r\n    newMaxResults: number = maxResults,\r\n    statusSearch = true\r\n  ): void => {\r\n    getData(searchString, newMaxResults)\r\n      .then((bookArray: Book[]) => {\r\n        setLoading(false);\r\n        setData(bookArray);\r\n        setErrorSearch(false);\r\n        setMoreBookLoading(false);\r\n        setStatusSearch(statusSearch);\r\n      })\r\n      .catch(() => {\r\n        setLoading(false);\r\n        setErrorSearch(true);\r\n        setMoreBookLoading(false);\r\n        setBooksLiveResult([]);\r\n      });\r\n  };\r\n\r\n  const onSearchChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const string: string = e.target.value;\r\n    setSearchString(string);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setErrorSearch(false);\r\n\r\n    if (searchString) {\r\n      const enterInterval = setTimeout(() => {\r\n        updateData(getLiveBooksData, setBooksLiveResult);\r\n      }, 500);\r\n      setIntervalRequest(enterInterval);\r\n\r\n      return () => {\r\n        clearTimeout(enterInterval);\r\n      };\r\n    } else {\r\n      setBooksLiveResult([]);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [searchString]);\r\n\r\n  useEffect(() => {\r\n    setActiveSearchString(searchString);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [booksResult]);\r\n\r\n  const onSearchSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault();\r\n    if (searchString && searchString !== activeSearchString && !errorSearch) {\r\n      updateData(getBooksData, setBooksResult, maxResults, false);\r\n      setLoading(true);\r\n      setBooksLiveResult([]);\r\n      clearTimeout(intervalRequest);\r\n    }\r\n  };\r\n\r\n  const getMoreBooks = (): void => {\r\n    if (maxResults >= 10 && maxResults <= 30) {\r\n      const newMaxResults = maxResults + moreBoksStep;\r\n      setMaxResults(newMaxResults);\r\n      setMoreBookLoading(true);\r\n      updateData(getBooksData, setBooksResult, newMaxResults);\r\n    }\r\n  };\r\n\r\n  const configTitle = (title: string, max: number): string => {\r\n    if (title.length > max) {\r\n      let lenCounter: number = 0;\r\n      const newTitle = title\r\n        .trim()\r\n        .split(\" \")\r\n        .filter((word: string) => {\r\n          lenCounter += word.length;\r\n          return lenCounter <= max && \" \" + word;\r\n        });\r\n      return newTitle.join(\" \") + \"..\";\r\n    }\r\n    return title;\r\n  };\r\n\r\n  const renderItems = booksResult.map(\r\n    (book: Book, i): React.ReactNode => {\r\n      const { title, infoLink, imageLink } = book;\r\n      const configuredTitle: string = configTitle(title, 20);\r\n\r\n      return (\r\n        <li className=\"result-book\" key={i}>\r\n          <a href={infoLink}>\r\n            <img src={imageLink} title={title} alt={title} />\r\n            <p>{configuredTitle}</p>\r\n          </a>\r\n        </li>\r\n      );\r\n    }\r\n  );\r\n\r\n  const renderLiveItems = booksLiveResult.map(\r\n    (book: Book, i): React.ReactNode => {\r\n      const configuredTitle: string = configTitle(book.title, 40);\r\n      const { infoLink } = book;\r\n      const iconLink: string =\r\n        \"https://www.flaticon.com/svg/static/icons/svg/482/482631.svg\";\r\n\r\n      return (\r\n        <li key={i}>\r\n          <a href={infoLink} className=\"search-live-list-item\">\r\n            <img src={iconLink} alt=\"icon\" />\r\n            {configuredTitle}\r\n          </a>\r\n        </li>\r\n      );\r\n    }\r\n  );\r\n\r\n  const MoreBooksElem = () => {\r\n    const len = booksResult.length;\r\n\r\n    if (!moreBookLoading && len < 40 && !loading && len === maxResults) {\r\n      return (\r\n        <button onClick={getMoreBooks} className=\"more-books-btn\">\r\n          Show more books\r\n        </button>\r\n      );\r\n    } else if (moreBookLoading) return <Preloader />;\r\n    return null;\r\n  };\r\n\r\n  const ResultNotFound = () => {\r\n    return (\r\n      <li className=\"search-live-list-item results-not-found\">\r\n        <img\r\n          src=\"https://www.flaticon.com/svg/static/icons/svg/482/482631.svg\"\r\n          alt=\"search\"\r\n        />\r\n        No books were found for \"<b>{searchString}</b>\"\r\n      </li>\r\n    );\r\n  };\r\n\r\n  const booksLiveResultErrorLogic = errorSearch && searchString;\r\n\r\n  const searchClassLogic =\r\n    booksLiveResult.length !== 0 || (errorSearch && searchString);\r\n\r\n  return (\r\n    <div className={searchClassLogic ? \"search-live search\" : \"search\"}>\r\n      <form action=\"#\" onSubmit={onSearchSubmit}>\r\n        <div className=\"search-labels\">\r\n          <input\r\n            className=\"search-labels-input\"\r\n            type=\"text\"\r\n            onChange={onSearchChange}\r\n            value={searchString}\r\n            placeholder=\"Search\"\r\n            autoFocus={true}\r\n          />\r\n          <input\r\n            className=\"search-labels-button\"\r\n            type=\"submit\"\r\n            value=\"Search\"\r\n          />\r\n        </div>\r\n\r\n        <ul className=\"search-live-list\">\r\n          {!booksLiveResultErrorLogic ? renderLiveItems : <ResultNotFound />}\r\n        </ul>\r\n\r\n        <p className=\"search-status\">\r\n          {booksResult.length !== 0 && `Query result: '${activeSearchString}'`}\r\n        </p>\r\n      </form>\r\n\r\n      <ul className=\"result\">{!loading ? renderItems : <Preloader />}</ul>\r\n      <div className=\"more-books\">\r\n        <MoreBooksElem />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","E:\\Learning\\React\\react-apps\\pim-books\\src\\service\\BookService.tsx",[],"E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\SearchPanel\\index.tsx",[],"E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\Preloader\\Preloader.tsx",[],["32","33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":19,"column":10,"nodeType":"40","messageId":"41","endLine":19,"endColumn":22},{"ruleId":"34","replacedBy":"42"},{"ruleId":"36","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"@typescript-eslint/no-unused-vars","'statusSearch' is assigned a value but never used.","Identifier","unusedVar",["44"],["45"],"no-global-assign","no-unsafe-negation"]