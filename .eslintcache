[{"E:\\Learning\\React\\react-apps\\pim-books\\src\\index.tsx":"1","E:\\Learning\\React\\react-apps\\pim-books\\src\\App.tsx":"2","E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\SearchPanel\\SearchPanel.tsx":"3","E:\\Learning\\React\\react-apps\\pim-books\\src\\service\\BookService.tsx":"4","E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\Preloader\\Preloader.tsx":"5","E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\BookDetails\\BookDetails.tsx":"6","E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\SearchPanel\\index.tsx":"7","E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\BookDetails\\index.tsx":"8","E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\PageNotFound\\index.tsx":"9","E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\PageNotFound\\PageNotFound.tsx":"10"},{"size":197,"mtime":1606859452349,"results":"11","hashOfConfig":"12"},{"size":1078,"mtime":1609259992966,"results":"13","hashOfConfig":"12"},{"size":6729,"mtime":1609259598096,"results":"14","hashOfConfig":"12"},{"size":2622,"mtime":1609258226162,"results":"15","hashOfConfig":"12"},{"size":344,"mtime":1607262593172,"results":"16","hashOfConfig":"12"},{"size":3625,"mtime":1609505211879,"results":"17","hashOfConfig":"12"},{"size":73,"mtime":1607594723041,"results":"18","hashOfConfig":"12"},{"size":73,"mtime":1607796228080,"results":"19","hashOfConfig":"12"},{"size":80,"mtime":1609259916678,"results":"20","hashOfConfig":"12"},{"size":450,"mtime":1609504618178,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"l8itc8",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Learning\\React\\react-apps\\pim-books\\src\\index.tsx",[],["45","46"],"E:\\Learning\\React\\react-apps\\pim-books\\src\\App.tsx",[],"E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\SearchPanel\\SearchPanel.tsx",["47"],"import React, { useEffect, useState } from \"react\";\r\nimport { getBooksData, getLiveBooksData } from \"../../service/BookService\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport \"./SearchPanel.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport bookPlaceholder from \"../../images/book-cover.jpg\";\r\n\r\ninterface Book {\r\n  readonly id: number | string;\r\n  readonly title: string;\r\n  readonly imageLink: string;\r\n  readonly infoLink: string;\r\n}\r\nconst SearchPanel = (props: any) => {\r\n  const [moreBoksStep] = useState<number>(10);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [booksResult, setBooksResult] = useState<Book[]>([]);\r\n  const [searchString, setSearchString] = useState<string>(\"\");\r\n  const [intervalRequest, setIntervalRequest] = useState<any>();\r\n  const [errorSearch, setErrorSearch] = useState<boolean>(false);\r\n  const [maxResults, setMaxResults] = useState<number>(moreBoksStep);\r\n  const [booksLiveResult, setBooksLiveResult] = useState<Book[]>([]);\r\n  const [moreBookLoading, setMoreBookLoading] = useState<boolean>(false);\r\n  const [activeSearchString, setActiveSearchString] = useState<string>(\"\");\r\n\r\n  const updateData = (\r\n    getData: any,\r\n    setData: any,\r\n    newMaxResults: number = maxResults\r\n  ): void => {\r\n    getData(searchString, newMaxResults)\r\n      .then((bookArray: Book[]) => {\r\n        setLoading(false);\r\n        setData(bookArray);\r\n        setErrorSearch(false);\r\n        setMoreBookLoading(false);\r\n      })\r\n      .catch(() => {\r\n        setLoading(false);\r\n        setErrorSearch(true);\r\n        setMoreBookLoading(false);\r\n        setBooksLiveResult([]);\r\n      });\r\n  };\r\n\r\n  const onSearchChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const string: string = e.target.value;\r\n    setSearchString(string);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setErrorSearch(false);\r\n\r\n    if (searchString.trim()) {\r\n      const enterInterval = setTimeout(() => {\r\n        updateData(getLiveBooksData, setBooksLiveResult);\r\n      }, 500);\r\n      setIntervalRequest(enterInterval);\r\n\r\n      return () => {\r\n        clearTimeout(enterInterval);\r\n      };\r\n    } else {\r\n      setBooksLiveResult([]);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [searchString]);\r\n\r\n  useEffect(() => {\r\n    setActiveSearchString(searchString);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [booksResult]);\r\n\r\n  const onSearchSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault();\r\n    if (searchString !== activeSearchString && !errorSearch) {\r\n      updateData(getBooksData, setBooksResult, maxResults);\r\n      setLoading(true);\r\n      setBooksLiveResult([]);\r\n      clearTimeout(intervalRequest);\r\n    }\r\n  };\r\n\r\n  const getMoreBooks = (): void => {\r\n    if (maxResults >= moreBoksStep && maxResults <= 30) {\r\n      const newMaxResults = maxResults + moreBoksStep;\r\n      setMaxResults(newMaxResults);\r\n      setMoreBookLoading(true);\r\n      updateData(getBooksData, setBooksResult, newMaxResults);\r\n    }\r\n  };\r\n\r\n  const configTitle = (title: string, max: number): string => {\r\n    if (title.length > max) {\r\n      let lenCounter: number = 0;\r\n      const newTitle = title\r\n        .trim()\r\n        .split(\" \")\r\n        .filter((word: string) => {\r\n          lenCounter += word.length;\r\n          return lenCounter <= max && \" \" + word;\r\n        });\r\n      return newTitle.join(\" \") + \"..\";\r\n    }\r\n    return title;\r\n  };\r\n\r\n  const renderItems = booksResult.map(\r\n    (book: Book, i): React.ReactNode => {\r\n      const { title, imageLink, id } = book;\r\n      const configuredTitle: string = configTitle(title, 20);\r\n\r\n      return (\r\n        <li\r\n          className=\"result_list-item\"\r\n          key={i}\r\n          onClick={() => props.openBookDetails(id)}\r\n        >\r\n          <Link to={\"/pim-book/book/\" + id}>\r\n            <img src={imageLink || bookPlaceholder} />\r\n            <p>{configuredTitle}</p>\r\n          </Link>\r\n        </li>\r\n      );\r\n    }\r\n  );\r\n\r\n  const renderLiveItems = booksLiveResult.map(\r\n    (book: Book, i): React.ReactNode => {\r\n      const { id } = book;\r\n      const configuredTitle: string = configTitle(book.title, 40);\r\n      const iconLink: string =\r\n        \"https://www.flaticon.com/svg/static/icons/svg/482/482631.svg\";\r\n\r\n      return (\r\n        <li\r\n          key={i}\r\n          onClick={() => props.openBookDetails(id)}\r\n          className=\"live_list-item\"\r\n        >\r\n          <Link to={\"/pim-book/book/\" + id}>\r\n            <img src={iconLink} className=\"live_icon\" alt=\"icon\" />\r\n            {configuredTitle}\r\n          </Link>\r\n        </li>\r\n      );\r\n    }\r\n  );\r\n\r\n  const MoreBooksElem = () => {\r\n    const len = booksResult.length;\r\n\r\n    if (!moreBookLoading && len < 40 && !loading && len === maxResults) {\r\n      return (\r\n        <button onClick={getMoreBooks} className=\"more-books_btn\">\r\n          Show more books\r\n        </button>\r\n      );\r\n    } else if (moreBookLoading) return <Preloader />;\r\n    return null;\r\n  };\r\n\r\n  const ResultNotFound = () => {\r\n    return (\r\n      <li className=\"live_list-item results-not-found\">\r\n        <img\r\n          src=\"https://www.flaticon.com/svg/static/icons/svg/482/482631.svg\"\r\n          className=\"live_icon\"\r\n          alt=\"icon\"\r\n        />\r\n        No books were found for \"<b>{searchString}</b>\"\r\n      </li>\r\n    );\r\n  };\r\n\r\n  const liveResultErrLogic = errorSearch && searchString;\r\n  const formStyleLogic = booksLiveResult.length !== 0 || liveResultErrLogic;\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <div className=\"container\">\r\n        <form\r\n          onSubmit={onSearchSubmit}\r\n          className={formStyleLogic ? \"form_live form\" : \"form\"}\r\n        >\r\n          <div className=\"labels\">\r\n            <input\r\n              className=\"labels_input\"\r\n              type=\"text\"\r\n              onChange={onSearchChange}\r\n              value={searchString}\r\n              placeholder=\"Search\"\r\n              autoFocus={true}\r\n            />\r\n            <input className=\"labels_button\" type=\"submit\" value=\"Search\" />\r\n          </div>\r\n\r\n          <ul className=\"live_list\">\r\n            {!liveResultErrLogic ? renderLiveItems : <ResultNotFound />}\r\n          </ul>\r\n\r\n          <p className=\"status\">\r\n            {booksResult.length !== 0 &&\r\n              `Query result: '${activeSearchString}'`}\r\n          </p>\r\n        </form>\r\n\r\n        <div className=\"result\">\r\n          <ul className=\"result_list\">\r\n            {!loading ? renderItems : <Preloader />}\r\n          </ul>\r\n          <div className=\"more-books\">\r\n            <MoreBooksElem />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","E:\\Learning\\React\\react-apps\\pim-books\\src\\service\\BookService.tsx",[],"E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\Preloader\\Preloader.tsx",[],"E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\BookDetails\\BookDetails.tsx",["48"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./BookDetails.scss\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport { getBookData } from \"../../service/BookService\";\r\n\r\nconst BookDetails = (data: any) => {\r\n  const [activeBookData, setActiveBookData] = useState<any>(null);\r\n  const [descStatus, setDescStatus] = useState<boolean>(false);\r\n  const { activeBookId } = data;\r\n\r\n  activeBookId && localStorage.setItem(\"activeBookId\", activeBookId);\r\n  const storageBookId: string = localStorage.getItem(\"activeBookId\")!;\r\n\r\n  useEffect(() => {\r\n    const bookId = activeBookId || storageBookId;\r\n    if (bookId) {\r\n      getBookData(bookId).then((books) => {\r\n        setActiveBookData(books);\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [activeBookId]);\r\n\r\n  if (!activeBookData) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Preloader />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const {\r\n    title,\r\n    publisher,\r\n    description,\r\n    infoLink,\r\n    publishedDate,\r\n    pageCount,\r\n    categories,\r\n    authors,\r\n    language,\r\n    imageLink,\r\n  } = activeBookData;\r\n  const maxDescLength = 225;\r\n\r\n  const renderItems = (array: string[]) => {\r\n    return array.map((item: any, i: number) => <span key={i}>{item}</span>);\r\n  };\r\n\r\n  const renderDescription = (description: string): string => {\r\n    const str = description.replaceAll(/(\\<(\\/?[^>]+)>)/g, \" \");\r\n    if (str.length < maxDescLength || descStatus) {\r\n      return str;\r\n    }\r\n    return str.slice(0, maxDescLength) + \"..\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"book-details\">\r\n      <div className=\"container\">\r\n        <div className=\"cover\">\r\n          <div className=\"cover_block\"></div>\r\n        </div>\r\n        \r\n        <div className=\"book\">\r\n          <div className=\"preview\">\r\n            <img src={imageLink} alt=\"book\" className=\"preview_img\" />\r\n            <a href={infoLink} className=\"preview_link button-styles\">\r\n              Learn More\r\n            </a>\r\n          </div>\r\n\r\n          <div className=\"info\">\r\n            <h2 className=\"info_title\">{title}</h2>\r\n            <div className=\"info_authors\">\r\n              <p>{renderItems(authors)}</p>\r\n            </div>\r\n\r\n            <div className=\"description\">\r\n              <span className=\"key\">About Book:</span>{\" \"}\r\n              <p>{renderDescription(description)}</p>\r\n              {!descStatus && description.length > maxDescLength && (\r\n                <div className=\"description_wrapper\">\r\n                  <i className=\"arrow down\"></i>\r\n                  <button onClick={() => setDescStatus(true)}>Show All</button>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            <ul className=\"list\">\r\n              <li className=\"list_categories\">\r\n                <span className=\"list_key\">Categories:</span>\r\n                {renderItems(categories)}\r\n              </li>\r\n              <li>\r\n                <span className=\"list_key\">Publish Date:</span>\r\n                <span>{publishedDate}</span>\r\n              </li>\r\n              <li>\r\n                <span className=\"list_key\">Print Page:</span>\r\n                <span>{pageCount}</span>\r\n              </li>\r\n              <li>\r\n                <span className=\"list_key\">Publisher:</span>\r\n                <span>{publisher}</span>\r\n              </li>\r\n              <li>\r\n                <span className=\"list_key\">Language:</span>\r\n                <span>{language}</span>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookDetails;\r\n","E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\SearchPanel\\index.tsx",[],"E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\BookDetails\\index.tsx",[],"E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\PageNotFound\\index.tsx",[],"E:\\Learning\\React\\react-apps\\pim-books\\src\\components\\PageNotFound\\PageNotFound.tsx",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":120,"column":13,"nodeType":"55","endLine":120,"endColumn":55},{"ruleId":"56","severity":1,"message":"57","line":51,"column":42,"nodeType":"58","messageId":"59","endLine":51,"endColumn":43,"suggestions":"60"},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-escape","Unnecessary escape character: \\<.","Literal","unnecessaryEscape",["63","64"],"no-global-assign","no-unsafe-negation",{"messageId":"65","fix":"66","desc":"67"},{"messageId":"68","fix":"69","desc":"70"},"removeEscape",{"range":"71","text":"72"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"73","text":"74"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[1405,1406],"",[1405,1405],"\\"]